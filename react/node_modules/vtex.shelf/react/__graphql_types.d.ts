export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Markdown: any;
  StringOrBoolean: any;
  Upload: any;
  IOSanitizedString: any;
  IOUpload: any;
};


















export type AssemblyOptionInput = {
  id: Scalars['ID'];
  quantity: Scalars['Int'];
  assemblyId: Scalars['String'];
  seller: Scalars['String'];
  options?: Maybe<Array<AssemblyOptionInput>>;
};




export type Behavior = 
  | 'USER_ONLY'
  | 'USER_AND_APP'
  | 'FULL';



export type BlockInput = {
  propsJSON: Scalars['String'];
  blocks: Array<Maybe<BlockInsertionInput>>;
  after: Array<Maybe<Scalars['String']>>;
  around: Array<Maybe<Scalars['String']>>;
  before: Array<Maybe<Scalars['String']>>;
};


export type BlockInsertionInput = {
  blockId?: Maybe<Scalars['String']>;
  extensionPointId?: Maybe<Scalars['String']>;
};

export type BlockPathItem = {
  role?: Maybe<BlockPathItemRole>;
  id?: Maybe<Scalars['String']>;
};

export type BlockPathItemRole = 
  | 'TEMPLATE'
  | 'BLOCK'
  | 'AFTER'
  | 'AROUND'
  | 'BEFORE';








export type CategoryTreeBehavior = 
  /** Uses the default value set by the search provider */
  | 'default'
  /** Show the category tree when it is possible */
  | 'show'
  /** Hide the category tree in any situation */
  | 'hide';






export type ConditionInput = {
  id?: Maybe<Scalars['String']>;
  pageContext?: Maybe<PageContextInput>;
  allMatches?: Maybe<Scalars['Boolean']>;
  statements?: Maybe<Array<Maybe<ConditionStatementInput>>>;
};


export type ConditionStatementInput = {
  subject?: Maybe<Scalars['String']>;
  verb?: Maybe<Scalars['String']>;
  objectJSON?: Maybe<Scalars['String']>;
};


export type ContentConfigurationInput = {
  allowMerge?: Maybe<Scalars['Boolean']>;
  condition?: Maybe<ConditionInput>;
  contentId?: Maybe<Scalars['String']>;
  contentJSON?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  origin?: Maybe<Scalars['String']>;
};





export type CrossSelingInputEnum = 
  | 'buy'
  | 'similars'
  | 'view'
  | 'viewAndBought'
  | 'accessories'
  | 'suggestions';













export type Encoding = 
  | 'ICU'
  | 'HANDLEBARS';







export type FilterType = 
  | 'TEXT'
  | 'NUMBER'
  | 'CATEGORYTREE'
  | 'BRAND'
  | 'PRICERANGE';




export type IndexedMessages = {
  from: Scalars['String'];
  messages: Array<MessageInputV2>;
};


export type InputValueType = 
  | 'TEXT'
  | 'BOOLEAN'
  | 'OPTIONS';


export type InstallmentsCriteria = 
  | 'MAX_WITHOUT_INTEREST'
  | 'MAX_WITH_INTEREST'
  | 'MAX'
  | 'MIN'
  | 'ALL';

export type InterfacePathItem = {
  id?: Maybe<Scalars['String']>;
  role?: Maybe<BlockPathItemRole>;
  index?: Maybe<Scalars['Int']>;
};

export type IoCacheControlScope = 
  | 'SEGMENT'
  | 'PUBLIC'
  | 'PRIVATE';







export type ItemsFilter = 
  /** Returns all items, same as no filter. */
  | 'ALL'
  /** Returns only the first available item. Returns first if no item is available. */
  | 'FIRST_AVAILABLE'
  /** Returns all available items. Returns first if no item is available. */
  | 'ALL_AVAILABLE';



export type ListArgsV2 = {
  range: MessagesRange;
};



export type MessageInputV2 = {
  content: Scalars['String'];
  context?: Maybe<Scalars['String']>;
  behavior?: Maybe<Behavior>;
};


export type MessageSaveInputV2 = {
  srcLang: Scalars['String'];
  srcMessage: Scalars['String'];
  targetMessage: Scalars['String'];
  groupContext?: Maybe<Scalars['String']>;
  context?: Maybe<Scalars['String']>;
};


export type MessagesRange = {
  from: Scalars['Int'];
  to: Scalars['Int'];
};




export type NewRouteInput = {
  uuid?: Maybe<Scalars['String']>;
  auth?: Maybe<Scalars['Boolean']>;
  blockId?: Maybe<Scalars['String']>;
  context?: Maybe<Scalars['String']>;
  declarer?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  interfaceId?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  routeId?: Maybe<Scalars['String']>;
  pages?: Maybe<Array<Maybe<PageInput>>>;
  title?: Maybe<Scalars['String']>;
  metaTags?: Maybe<RouteMetaTagsInput>;
  bindingId?: Maybe<Scalars['String']>;
  dataSource?: Maybe<Scalars['String']>;
};



export type Operator = 
  | 'and'
  | 'or';

export type PageBlocksInput = {
  pathId?: Maybe<Scalars['String']>;
  renderMajor?: Maybe<Scalars['Int']>;
  query?: Maybe<Scalars['String']>;
  depTree?: Maybe<Scalars['String']>;
  contentType?: Maybe<Scalars['String']>;
  device?: Maybe<UserDevice>;
};


export type PageContentInput = {
  extensions?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  routeId?: Maybe<Scalars['String']>;
  routeContextLocator?: Maybe<Scalars['String']>;
  params?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
  renderMajor?: Maybe<Scalars['Int']>;
  depTree?: Maybe<Scalars['String']>;
  resolvedContentType?: Maybe<ResolvedContentType>;
};



export type PageContextInput = {
  id?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};


export type PageEntityIdentifier = 
  | 'brand'
  | 'department'
  | 'category'
  | 'subcategory'
  | 'search';

export type PageInput = {
  pageId?: Maybe<Scalars['String']>;
  condition?: Maybe<ConditionInput>;
  template?: Maybe<Scalars['String']>;
};



export type PrefecthBlocksInput = {
  routeId?: Maybe<Scalars['String']>;
  declarer?: Maybe<Scalars['String']>;
  renderMajor?: Maybe<Scalars['Int']>;
  query?: Maybe<Scalars['String']>;
  depTree?: Maybe<Scalars['String']>;
  device?: Maybe<UserDevice>;
};


export type PreviewRouteInput = {
  routeId?: Maybe<Scalars['String']>;
  declarer?: Maybe<Scalars['String']>;
};










export type ProductUniqueIdentifier = {
  field: ProductUniqueIdentifierField;
  value: Scalars['ID'];
};

export type ProductUniqueIdentifierField = 
  | 'id'
  | 'slug'
  | 'ean'
  | 'reference'
  | 'sku';













export type ResolvedContentType = {
  id?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};


export type RouteMetaTagsInput = {
  description?: Maybe<Scalars['String']>;
  keywords?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type SaveArgsV2 = {
  to: Scalars['String'];
  messages: Array<MessageSaveInputV2>;
  fireEvent?: Maybe<Scalars['Boolean']>;
};










export type SelectedFacetInput = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};



export type SimulationBehavior = 
  /** Does simulation on catalog as usual */
  | 'default'
  /** Calls catalog passing a parameter to not simulate each SKU and get its most up to date price. */
  | 'skip'
  /** Does the simulation on the client side */
  | 'async';





export type Sort = 
  | 'ASC'
  | 'DESC';












export type TranslateArgs = {
  indexedByFrom: Array<IndexedMessages>;
  to: Scalars['String'];
  depTree?: Maybe<Scalars['String']>;
  encoding?: Maybe<Encoding>;
};

export type TranslateWithDependenciesArgs = {
  indexedByFrom: Array<IndexedMessages>;
  to: Scalars['String'];
  depTree: Scalars['String'];
  encoding?: Maybe<Encoding>;
};




export type UserDevice = 
  | 'desktop'
  | 'phone'
  | 'tablet'
  | 'unknown';


export type ProductRecommendationsQueryVariables = Exact<{
  identifier?: Maybe<ProductUniqueIdentifier>;
  type?: Maybe<CrossSelingInputEnum>;
}>;


export type ProductRecommendationsQuery = { __typename?: 'Query', productRecommendations?: Maybe<Array<Maybe<{ __typename?: 'Product', cacheId?: Maybe<string>, productId?: Maybe<string>, productName?: Maybe<string>, productReference?: Maybe<string>, description?: Maybe<string>, link?: Maybe<string>, linkText?: Maybe<string>, brand?: Maybe<string>, brandId?: Maybe<number>, categories?: Maybe<Array<Maybe<string>>>, priceRange?: Maybe<{ __typename?: 'ProductPriceRange', sellingPrice?: Maybe<{ __typename?: 'PriceRange', highPrice?: Maybe<number>, lowPrice?: Maybe<number> }>, listPrice?: Maybe<{ __typename?: 'PriceRange', highPrice?: Maybe<number>, lowPrice?: Maybe<number> }> }>, specificationGroups?: Maybe<Array<Maybe<{ __typename?: 'SpecificationGroup', name?: Maybe<string>, originalName?: Maybe<string>, specifications?: Maybe<Array<Maybe<{ __typename?: 'SpecificationGroupProperty', name?: Maybe<string>, originalName?: Maybe<string>, values?: Maybe<Array<Maybe<string>>> }>>> }>>>, skuSpecifications?: Maybe<Array<Maybe<{ __typename?: 'SkuSpecification', field?: Maybe<{ __typename?: 'SKUSpecificationField', name?: Maybe<string>, originalName?: Maybe<string> }>, values?: Maybe<Array<Maybe<{ __typename?: 'SKUSpecificationValue', name?: Maybe<string>, originalName?: Maybe<string> }>>> }>>>, items?: Maybe<Array<Maybe<{ __typename?: 'SKU', name?: Maybe<string>, itemId?: Maybe<string>, measurementUnit?: Maybe<string>, unitMultiplier?: Maybe<number>, referenceId?: Maybe<Array<Maybe<{ __typename?: 'Reference', Value?: Maybe<string> }>>>, images?: Maybe<Array<Maybe<{ __typename?: 'Image', imageId?: Maybe<string>, imageLabel?: Maybe<string>, imageTag?: Maybe<string>, imageUrl?: Maybe<string>, imageText?: Maybe<string> }>>>, variations?: Maybe<Array<Maybe<{ __typename?: 'Property', name?: Maybe<string>, values?: Maybe<Array<Maybe<string>>> }>>>, sellers?: Maybe<Array<Maybe<{ __typename?: 'Seller', sellerId?: Maybe<string>, sellerName?: Maybe<string>, addToCartLink?: Maybe<string>, sellerDefault?: Maybe<boolean>, commertialOffer?: Maybe<{ __typename?: 'Offer', AvailableQuantity?: Maybe<number>, CacheVersionUsedToCallCheckout?: Maybe<string>, ListPrice?: Maybe<number>, Price?: Maybe<number>, PriceValidUntil?: Maybe<string>, PriceWithoutDiscount?: Maybe<number>, RewardValue?: Maybe<number>, spotPrice?: Maybe<number>, Tax?: Maybe<number>, taxPercentage?: Maybe<number>, Installments?: Maybe<Array<Maybe<{ __typename?: 'Installment', Value?: Maybe<number>, InterestRate?: Maybe<number>, TotalValuePlusInterestRate?: Maybe<number>, NumberOfInstallments?: Maybe<number>, Name?: Maybe<string> }>>>, teasers?: Maybe<Array<{ __typename?: 'Teaser', name?: Maybe<string> }>>, discountHighlights?: Maybe<Array<{ __typename?: 'Discount', name?: Maybe<string> }>> }> }>>> }>>>, productClusters?: Maybe<Array<Maybe<{ __typename?: 'ProductClusters', id?: Maybe<string>, name?: Maybe<string> }>>>, properties?: Maybe<Array<Maybe<{ __typename?: 'Property', name?: Maybe<string>, values?: Maybe<Array<Maybe<string>>> }>>> }>>> };

export type ProductsQueryVariables = Exact<{
  category?: Maybe<Scalars['String']>;
  collection?: Maybe<Scalars['String']>;
  specificationFilters?: Maybe<Array<Maybe<Scalars['String']>> | Maybe<Scalars['String']>>;
  orderBy?: Maybe<Scalars['String']>;
  from?: Maybe<Scalars['Int']>;
  to?: Maybe<Scalars['Int']>;
  hideUnavailableItems?: Maybe<Scalars['Boolean']>;
  skusFilter?: Maybe<ItemsFilter>;
}>;


export type ProductsQuery = { __typename?: 'Query', products?: Maybe<Array<Maybe<{ __typename?: 'Product', cacheId?: Maybe<string>, productId?: Maybe<string>, productName?: Maybe<string>, productReference?: Maybe<string>, description?: Maybe<string>, link?: Maybe<string>, linkText?: Maybe<string>, brand?: Maybe<string>, brandId?: Maybe<number>, categories?: Maybe<Array<Maybe<string>>>, priceRange?: Maybe<{ __typename?: 'ProductPriceRange', sellingPrice?: Maybe<{ __typename?: 'PriceRange', highPrice?: Maybe<number>, lowPrice?: Maybe<number> }>, listPrice?: Maybe<{ __typename?: 'PriceRange', highPrice?: Maybe<number>, lowPrice?: Maybe<number> }> }>, specificationGroups?: Maybe<Array<Maybe<{ __typename?: 'SpecificationGroup', name?: Maybe<string>, originalName?: Maybe<string>, specifications?: Maybe<Array<Maybe<{ __typename?: 'SpecificationGroupProperty', name?: Maybe<string>, originalName?: Maybe<string>, values?: Maybe<Array<Maybe<string>>> }>>> }>>>, skuSpecifications?: Maybe<Array<Maybe<{ __typename?: 'SkuSpecification', field?: Maybe<{ __typename?: 'SKUSpecificationField', name?: Maybe<string>, originalName?: Maybe<string> }>, values?: Maybe<Array<Maybe<{ __typename?: 'SKUSpecificationValue', name?: Maybe<string>, originalName?: Maybe<string> }>>> }>>>, items?: Maybe<Array<Maybe<{ __typename?: 'SKU', name?: Maybe<string>, itemId?: Maybe<string>, measurementUnit?: Maybe<string>, unitMultiplier?: Maybe<number>, referenceId?: Maybe<Array<Maybe<{ __typename?: 'Reference', Value?: Maybe<string> }>>>, images?: Maybe<Array<Maybe<{ __typename?: 'Image', imageUrl?: Maybe<string>, imageTag?: Maybe<string>, imageLabel?: Maybe<string> }>>>, variations?: Maybe<Array<Maybe<{ __typename?: 'Property', name?: Maybe<string>, values?: Maybe<Array<Maybe<string>>> }>>>, sellers?: Maybe<Array<Maybe<{ __typename?: 'Seller', sellerId?: Maybe<string>, sellerName?: Maybe<string>, commertialOffer?: Maybe<{ __typename?: 'Offer', AvailableQuantity?: Maybe<number>, Price?: Maybe<number>, PriceWithoutDiscount?: Maybe<number>, ListPrice?: Maybe<number>, spotPrice?: Maybe<number>, Tax?: Maybe<number>, taxPercentage?: Maybe<number>, Installments?: Maybe<Array<Maybe<{ __typename?: 'Installment', Value?: Maybe<number>, InterestRate?: Maybe<number>, TotalValuePlusInterestRate?: Maybe<number>, NumberOfInstallments?: Maybe<number>, Name?: Maybe<string> }>>>, teasers?: Maybe<Array<{ __typename?: 'Teaser', name?: Maybe<string> }>>, discountHighlights?: Maybe<Array<{ __typename?: 'Discount', name?: Maybe<string> }>> }> }>>> }>>>, productClusters?: Maybe<Array<Maybe<{ __typename?: 'ProductClusters', id?: Maybe<string>, name?: Maybe<string> }>>>, properties?: Maybe<Array<Maybe<{ __typename?: 'Property', name?: Maybe<string>, values?: Maybe<Array<Maybe<string>>> }>>> }>>> };

export {}