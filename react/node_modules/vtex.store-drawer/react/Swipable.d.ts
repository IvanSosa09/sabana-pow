import React, { ReactElement } from 'react';
declare type Position = 'center' | 'left' | 'right';
interface Props {
    children: ReactElement;
    onSwipeLeft: () => void;
    onSwipeRight: () => void;
    onTriggerChange: (args: {
        type: string;
        speed: number;
    } | null) => void;
    onLockScroll: () => void;
    onUnlockScroll: () => void;
    onDragStart: () => void;
    onDragEnd: () => void;
    onSetPosition: (args: {
        element: ReactElement | HTMLDivElement;
        offset: number | string;
    }) => void;
    onUpdateOffset: (offset: number | string) => void;
    threshold: number;
    enabled: boolean;
    rubberBanding: boolean;
    element: ReactElement;
    position: Position;
    className: string;
    style: object;
    positionRight: number | string;
    positionLeft: number | string;
    preserveMomentum: boolean;
    allowOutsideDrag: boolean;
}
export default class Swipable extends React.Component<Props> {
    private dragContainer;
    private dragStartPos;
    private isDragging;
    private isPointerDown;
    private isScrolling;
    private momentum;
    private momentumTimeout;
    private offset;
    private offsetAnimation;
    private stopAnimation;
    private wasDragging;
    private willTrigger;
    private previousDragPositions;
    static defaultProps: {
        onSwipeLeft: null;
        leftTargetPosition: null;
        onSwipeRight: null;
        rightTargetPosition: null;
        onTriggerChange: null;
        position: string;
        onLockScroll: () => void;
        onUnlockScroll: () => void;
        onDragStart: () => void;
        onDragEnd: () => void;
        onSetPosition: ({ element, offset, }: {
            element: HTMLDivElement;
            offset: number;
        }) => void;
        onUpdateOffset: () => void;
        element: null;
        threshold: number;
        enabled: boolean;
        rubberBanding: boolean;
        style: {};
        positionRight: string;
        positionLeft: string;
        preserveMomentum: boolean;
        allowOutsideDrag: boolean;
    };
    constructor(props: Props);
    componentDidMount(): void;
    componentWillUnmount(): void;
    private handleClick;
    componentDidUpdate(prevProps: Props): void;
    private updatePosition;
    private getOffsetFromPosition;
    private handleDragStart;
    /** Lets the parent know that a swipe event will be triggered if the cursor
     * is released. Useful for displaying UI feedback */
    private dispatchTriggerChange;
    private handleDragMove;
    private setOffset;
    private setMomentum;
    /** Checks if the mouse/touch movement at the time of release triggers a
     * swipe, and if so, to which direction */
    private checkTrigger;
    private handleDragEnd;
    render(): JSX.Element;
}
export {};
